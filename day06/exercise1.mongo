// use usermanaged
db.createCollection("clients")
db.clients.insert({ "firstName":"John", 
  "lastName":"West", 
  "email":"john.west@mail.com", 
  "phone":"032345432134",
  "BusinessType": ["Sell", "Sugar", "Drinks"],
  "Reference":100,
  "Company":"Coca-Cola"})
db.clients.drop()
db.createCollection("clients")
// mongoimport --db usermanaged --collection clients --jsonArray --drop --file clients.json
// mongoimport --db usermanaged --collection clients --jsonArray --mode insert --file clients.json
// mongoimport --db usermanaged --collection clients --jsonArray --mode upsert --upsertFields Id --file clients_upsert.json
// mongoimport --db usermanaged --collection cities --type csv --headerline --file cities.csv
// Consultas MongoDB con Condiciones 
// 1 Encuentra cualquier registro donde Nombre es Tom
db.clients.find({"Name": "Tom"})
// 2 Encuentre cualquier registro donde el monto de pago total (Pago.Total) es 400.
db.clients.find({"Payment.Total": 400})
// 3 Encuentre cualquier registro donde el precio (Transaction.price) sea mayor que 400.
db.clients.find({"Transaction.price": {$gt: 400}})
// 4 Busque cualquier registro donde Note sea nulo o falte la clave.
db.clients.find({"Note": null})
// 5 Encuentre cualquier registro donde exista Nota y su valor sea nulo.
db.clients.find({$and: [{"Note": null}, {"Note": {$exists: true}}]})
// 6 Encuentra cualquier registro donde no exista la clave de nota.
db.clients.find({"Note": {$exists: false}})
// Agregación con MongoDB
// 1 Calcule el monto total de la transacción sumando Pago. Total en todos los registros.
db.clients.aggregate({$group: {_id: '', TotalRevenue: { $sum: '$Payment.Total' }}})
// 2 Obtenga el precio total por registro sumando los valores de precio en la matriz de Transacción (Transaction.price).
db.clients.aggregate([{$project: {revenueTotal: { $sum: "$Transaction.price"}}}])
// 3 Calcule los pagos totales (Pago.Total) para cada tipo de pago (Tipo de pago).
db.clients.aggregate([{$group: {_id: "$Payment.Type", totalAmount: { $sum: "$Payment.Total" }, count: { $sum: 1 }}}])
// 4 Encuentra la identificación máxima.
db.clients.aggregate([{$group: {_id: '', maxId: {$max: "$Id"}}}])
// 5 Encuentra el precio máximo (Transaction.price).
db.transactions.aggregate([{$group: {_id: '', maxPrice: {$max: {$max: "$Transaction.price"}}}}])
// Operaciones CRUD
// 1 Inserte un registro a continuación.
db.transactions.insert(
{
"Id": 110,
"Name": "Inserted Record",
"TransactionId": "tranNew1",
"Transaction": [
{
"ItemId":"c324",
"price": 456
},
{
"ItemId":"d456",
"price": 543
}
],
"Subscriber": false,
"Payment": {
"Type": "Debit-Card",
"Total": 999,
"Success": true
},
"Note":'Hello World'
})
// 2 Actualizando el nuevo registro insertado arriba. Hacer nombre = ’Registro actualizado’ & Note = ’¡Actualizado!’
db.transactions.update({Id:110},{$set:{Name:'Updated Record',Note:'Updated!'}})
// 3 Elimine el registro insertado arriba utilizando Id.
db.transaction.remove({Id:110})
